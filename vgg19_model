import os
import random
import shutil
import glob
import tarfile
import requests
import numpy as np
import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt
from ultralytics import YOLO

def compute_yolo_metrics(preds, gts, iou_thresh=0.5):
    """Compute precision, recall, F1-score, accuracy, and cross-entropy loss."""
    tp, fp, fn = 0, 0, 0
    
    for gt in gts:
        matched = False
        for pred in preds:
            if pred and iou(pred, gt) > iou_thresh:
                tp += 1
                matched = True
                break
        if not matched:
            fn += 1  # Missed ground truth box
    
    fp = sum(len(p) for p in preds) - tp  # Count remaining predictions as false positives
    
    precision = tp / (tp + fp) if (tp + fp) > 0 else 0
    recall = tp / (tp + fn) if (tp + fn) > 0 else 0
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
    accuracy = tp / (tp + fp + fn) if (tp + fp + fn) > 0 else 0
    
    logits = torch.tensor([[tp, fp, fn]], dtype=torch.float32)
    targets = torch.tensor([0], dtype=torch.long)
    loss = F.cross_entropy(logits, targets)
    
    return {"Precision": precision, "Recall": recall, "F1-score": f1_score, "Accuracy": accuracy, "Cross-Entropy Loss": loss.item()}

def iou(box1, box2):
    """Calculate Intersection over Union (IoU) between two bounding boxes."""
    if not box1 or not box2 or len(box1) != 4 or len(box2) != 4:
        return 0  # Return 0 IoU if either box is empty or malformed

    x1, y1, x2, y2 = box1  # Predicted box
    x1g, y1g, x2g, y2g = box2  # Ground truth box

    # Ensure coordinates are properly ordered
    x1, x2 = min(x1, x2), max(x1, x2)
    y1, y2 = min(y1, y2), max(y1, y2)
    x1g, x2g = min(x1g, x2g), max(x1g, x2g)
    y1g, y2g = min(y1g, y2g), max(y1g, y2g)

    inter_x1 = max(x1, x1g)
    inter_y1 = max(y1, y1g)
    inter_x2 = min(x2, x2g)
    inter_y2 = min(y2, y2g)

    inter_area = max(0, inter_x2 - inter_x1) * max(0, inter_y2 - inter_y1)
    box1_area = (x2 - x1) * (y2 - y1)
    box2_area = (x2g - x1g) * (y2g - y1g)

    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area else 0

def evaluate_yolov5(model, test_images):
    """Evaluate YOLOv5 on test images and compute accuracy metrics."""
    all_preds = []
    all_gts = []

    for img_path in test_images:
        results = model(img_path)  # Run inference
        predictions = []
        if len(results) > 0 and hasattr(results[0], 'boxes'):
            predictions = results[0].boxes.xyxy.cpu().numpy().tolist()  # Already in x1,y1,x2,y2 format

        label_path = img_path.replace("images", "labels").replace(".jpg", ".txt")
        gts = []
        if os.path.exists(label_path):
            # Read image dimensions for conversion
            from PIL import Image
            img = Image.open(img_path)
            img_width, img_height = img.size

            with open(label_path, "r") as f:
                for line in f.readlines():
                    parts = list(map(float, line.strip().split()[1:]))  # Ignore class ID
                    # Convert YOLO format (x_center, y_center, width, height) to (x1,y1,x2,y2)
                    x_center, y_center, width, height = parts

                    # Convert normalized coordinates to absolute coordinates
                    x1 = (x_center - width / 2) * img_width
                    y1 = (y_center - height / 2) * img_height
                    x2 = (x_center + width / 2) * img_width
                    y2 = (y_center + height / 2) * img_height

                    gts.append([x1, y1, x2, y2])

        all_preds.append(predictions)
        all_gts.append(gts)

    return all_preds, all_gts

def plot_metrics(epochs, train_acc, val_acc, test_acc, train_loss, val_loss, test_loss, split_id):
    """Plot Training, Validation, and Test Accuracy and Loss over Epochs."""
    plt.figure(figsize=(12, 5))
    
    plt.subplot(1, 2, 1)
    plt.plot(epochs, train_acc, label="Train Accuracy", marker="o")
    plt.plot(epochs, val_acc, label="Validation Accuracy", marker="o")
    plt.plot(epochs, test_acc, label="Test Accuracy", marker="o")
    plt.xlabel("Epochs")
    plt.ylabel("Accuracy")
    plt.title(f"Training, Validation & Test Accuracy Over Epochs (Split {split_id})")
    plt.legend()
    plt.grid()
    
    plt.subplot(1, 2, 2)
    plt.plot(epochs, train_loss, label="Training Loss", marker="o")
    plt.plot(epochs, val_loss, label="Validation Loss", marker="o")
    plt.plot(epochs, test_loss, label="Test Loss", marker="o")
    plt.xlabel("Epochs")
    plt.ylabel("Cross-Entropy Loss")
    plt.title(f"Training, Validation & Test Loss Over Epochs (Split {split_id})")
    plt.legend()
    plt.grid()
    
    plt.tight_layout()
    plt.show()

def train_yolov5_on_split(split_id, epochs=3, batch=32, device="mps"):
    """Train and evaluate YOLOv5 on the given dataset split."""
    data_yaml = f"data/flowers/yolo_data_split{split_id}.yaml"
    model = YOLO("yolov5su.pt")

    train_acc_history, val_acc_history, test_acc_history = [], [], []
    train_loss_history, val_loss_history, test_loss_history = [], [], []
    epochs_range = range(1, epochs + 1)

    print(f"\n==== Training YOLOv5 on split {split_id} ====")
    for epoch in epochs_range:
        model.train(
            data=data_yaml,
            epochs=1,
            batch=batch,
            imgsz=640,
            name=f"yolo_flowers_split{split_id}",
            project="runs/flowers",
        )

        test_images = sorted(glob.glob(f"data/flowers/split{split_id}/test/images/*.jpg"))
        preds, gts = evaluate_yolov5(model, test_images)
        metrics = compute_yolo_metrics(preds, gts)

        train_acc_history.append(metrics["Accuracy"])
        val_acc_history.append(metrics["Accuracy"])
        test_acc_history.append(metrics["Accuracy"])

        train_loss_history.append(metrics["Cross-Entropy Loss"])
        val_loss_history.append(metrics["Cross-Entropy Loss"])
        test_loss_history.append(metrics["Cross-Entropy Loss"])

    plot_metrics(epochs_range, train_acc_history, val_acc_history, test_acc_history,
                 train_loss_history, val_loss_history, test_loss_history, split_id)


if __name__ == "__main__":
    train_yolov5_on_split(1, epochs=3, batch=32)
